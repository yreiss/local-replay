
This readme is currently a mix of planned behavior, design considerations and options. 


playcap.py is a utility for replaying a pcap file containing packets sent accross multiple networks within a single physical or virtual machine, passing through the network layer of the kernel.
Each network is represented by a single virtual interface (current planned implementation is tun device. dummy interface may also be considered but this requires an injection kernel module - I think).

The packets passed will go through the network layer of the kernel and allow for simulation of specific systems. This may be helpfull in testing firewall rules, IPS behavior (e.g. snort), routing etc.

For example, suppose we have a system that performs IPS on inline traffic. Suppose we have a capture of traffic generated by a malware and we want to check whether the system blocks or alerts on specific packets. We can run the capture through the system and examine the behavior. 

We may need to assume that packets captured are cross networks (i.e. the source and destination IP address of the packets are no in the same subnet). Each replayed packet is written (write()) to the interface associated with the source IP. Playpcap is responsible for configuring the routing table of the machine such that it 

playcap creates two 'tun' interfaces, and assigns one to the local (private) address space and the other to the public space. It also configures the routing table correspondingly.

For example, suppose tun1 represents the local side, and tun2 represent the remote side. Suppose also that a capture was made for traffic between a home client and facebook, then the packets sent from the home to public addresses (dns, facebook servers etc.) will be written to tun1 and the packets sent back from public addresses will be written to tun2.

In order to play a pcap, two instances of playcap.py will be run with the same pcap but with different roles (lan and wan). Both instances iterate the pcap packet by packet. The handling of each packet isdone as following:
If the packet's destination is the other side (e.g. I'm the LAN instance and the destination is 
The instance with the client role, will send packets with public address destination (write packets to tun1) and wait for packets 


iptables Issues
---------------
Note that iptables may require some manipulation (or alternatively the names of the virtual interface must be 


Handling NAT
------------
In a NAT box, the capture have been done on the local or on the remote interface. In the first case, the addresses and ports will be 'pre nat'. In the second case, the address will belong to the outgoing interface and it is not possible to recover the original address.

It should be considered 


Honoring timestamps
-------------------

Live addresses
-----------------
An issue that needs to be addressed is that the system may require specific addresses to be accessible. E.g. for backend services or controling the application.

TBD
---
Do we want to handle packets within the same network (LAN to LAN)?
DO we want to handle packets sent to and from the address of the lan interface?
Possibly run the two instances from the same script.
Support captures that involve multiple private networks (e.g. 192.168.x.x and 10.0.0.x and 10.0.4.x). Probably will require a configuration file. Maybe start like this from day one.


------------- TEMPORARY ----------------
In order to send a single UDP packet hardcoded from "10.0.1.6" to "10.0.0.6" run two instances of playcap.py:
# sudo python ./playcap.py --tun-addr 10.0.0.5
# sudo python ./playcap.py --tun-addr=10.0.1.5 -w

The first reads from the a tunnel and the second writes.






